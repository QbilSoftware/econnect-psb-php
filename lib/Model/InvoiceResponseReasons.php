<?php

/**
 * InvoiceResponseReasons
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  EConnect\Psb
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PSB API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: techsupport@econnect.eu
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EConnect\Psb\Model;

use \ArrayAccess;
use \EConnect\Psb\ObjectSerializer;

/**
 * InvoiceResponseReasons Class Doc Comment
 *
 * @category Class
 * @description Depending on the status code, a clarification may be needed to state the buyerâ€™s reason for the status.                [NON] No Issue. Indicates that receiver of the documents sends the message just to update the status and there are no problems with document processing.    [REF] References incorrect. Indicates that the received document did not contain references as required by the receiver for correctly routing the document for approval or processing.    [LEG] Legal information incorrect. Information in the received document is not according to legal requirements.    [REC] Receiver unknown. The party to which the document is addressed is not known.    [QUA] Item quality insufficient. Unacceptable or incorrect quality.    [DEL] Delivery issues. Delivery proposed or provided is not acceptable.    [PRI] Prices incorrect. Prices not according to previous expectation.    [QTY] Quantity incorrect. Quantity not according to previous expectation.     [ITM] Items incorrect. Items not according to previous expectation.    [PAY] Payment terms incorrect. Payment terms not according to previous expectation.     [UNR] Not recognized. Commercial transaction not recognized.    [FIN] Finance incorrect. Finance terms not according to previous expectation.    [PPD] Partially Paid. Payment is partially but not fully paid.     [OTH] Other. Reason for status is not defined by code.                  Status Clarification Reason list:  ./misc/codeList.html#status-clarification-reason
 * @package  EConnect\Psb
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceResponseReasons implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceResponse_reasons';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'no_issue' => 'string',
        'references_incorrect' => 'string',
        'legal_information_incorrect' => 'string',
        'credit_fully' => 'string',
        'receiver_unknown' => 'string',
        'item_quality_insufficient' => 'string',
        'delivery_issues' => 'string',
        'prices_incorrect' => 'string',
        'quantity_incorrect' => 'string',
        'items_incorrect' => 'string',
        'payment_terms_incorrect' => 'string',
        'not_recognized' => 'string',
        'finance_incorrect' => 'string',
        'partially_paid' => 'string',
        'other' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'no_issue' => null,
        'references_incorrect' => null,
        'legal_information_incorrect' => null,
        'credit_fully' => null,
        'receiver_unknown' => null,
        'item_quality_insufficient' => null,
        'delivery_issues' => null,
        'prices_incorrect' => null,
        'quantity_incorrect' => null,
        'items_incorrect' => null,
        'payment_terms_incorrect' => null,
        'not_recognized' => null,
        'finance_incorrect' => null,
        'partially_paid' => null,
        'other' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'no_issue' => false,
        'references_incorrect' => false,
        'legal_information_incorrect' => false,
        'credit_fully' => false,
        'receiver_unknown' => false,
        'item_quality_insufficient' => false,
        'delivery_issues' => false,
        'prices_incorrect' => false,
        'quantity_incorrect' => false,
        'items_incorrect' => false,
        'payment_terms_incorrect' => false,
        'not_recognized' => false,
        'finance_incorrect' => false,
        'partially_paid' => false,
        'other' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'no_issue' => 'NoIssue',
        'references_incorrect' => 'ReferencesIncorrect',
        'legal_information_incorrect' => 'LegalInformationIncorrect',
        'credit_fully' => 'CreditFully',
        'receiver_unknown' => 'ReceiverUnknown',
        'item_quality_insufficient' => 'ItemQualityInsufficient',
        'delivery_issues' => 'DeliveryIssues',
        'prices_incorrect' => 'PricesIncorrect',
        'quantity_incorrect' => 'QuantityIncorrect',
        'items_incorrect' => 'ItemsIncorrect',
        'payment_terms_incorrect' => 'PaymentTermsIncorrect',
        'not_recognized' => 'NotRecognized',
        'finance_incorrect' => 'FinanceIncorrect',
        'partially_paid' => 'PartiallyPaid',
        'other' => 'Other'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'no_issue' => 'setNoIssue',
        'references_incorrect' => 'setReferencesIncorrect',
        'legal_information_incorrect' => 'setLegalInformationIncorrect',
        'credit_fully' => 'setCreditFully',
        'receiver_unknown' => 'setReceiverUnknown',
        'item_quality_insufficient' => 'setItemQualityInsufficient',
        'delivery_issues' => 'setDeliveryIssues',
        'prices_incorrect' => 'setPricesIncorrect',
        'quantity_incorrect' => 'setQuantityIncorrect',
        'items_incorrect' => 'setItemsIncorrect',
        'payment_terms_incorrect' => 'setPaymentTermsIncorrect',
        'not_recognized' => 'setNotRecognized',
        'finance_incorrect' => 'setFinanceIncorrect',
        'partially_paid' => 'setPartiallyPaid',
        'other' => 'setOther'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'no_issue' => 'getNoIssue',
        'references_incorrect' => 'getReferencesIncorrect',
        'legal_information_incorrect' => 'getLegalInformationIncorrect',
        'credit_fully' => 'getCreditFully',
        'receiver_unknown' => 'getReceiverUnknown',
        'item_quality_insufficient' => 'getItemQualityInsufficient',
        'delivery_issues' => 'getDeliveryIssues',
        'prices_incorrect' => 'getPricesIncorrect',
        'quantity_incorrect' => 'getQuantityIncorrect',
        'items_incorrect' => 'getItemsIncorrect',
        'payment_terms_incorrect' => 'getPaymentTermsIncorrect',
        'not_recognized' => 'getNotRecognized',
        'finance_incorrect' => 'getFinanceIncorrect',
        'partially_paid' => 'getPartiallyPaid',
        'other' => 'getOther'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('no_issue', $data ?? [], null);
        $this->setIfExists('references_incorrect', $data ?? [], null);
        $this->setIfExists('legal_information_incorrect', $data ?? [], null);
        $this->setIfExists('credit_fully', $data ?? [], null);
        $this->setIfExists('receiver_unknown', $data ?? [], null);
        $this->setIfExists('item_quality_insufficient', $data ?? [], null);
        $this->setIfExists('delivery_issues', $data ?? [], null);
        $this->setIfExists('prices_incorrect', $data ?? [], null);
        $this->setIfExists('quantity_incorrect', $data ?? [], null);
        $this->setIfExists('items_incorrect', $data ?? [], null);
        $this->setIfExists('payment_terms_incorrect', $data ?? [], null);
        $this->setIfExists('not_recognized', $data ?? [], null);
        $this->setIfExists('finance_incorrect', $data ?? [], null);
        $this->setIfExists('partially_paid', $data ?? [], null);
        $this->setIfExists('other', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no_issue
     *
     * @return string|null
     */
    public function getNoIssue()
    {
        return $this->container['no_issue'];
    }

    /**
     * Sets no_issue
     *
     * @param string|null $no_issue no_issue
     *
     * @return self
     */
    public function setNoIssue($no_issue)
    {
        if (is_null($no_issue)) {
            throw new \InvalidArgumentException('non-nullable no_issue cannot be null');
        }
        $this->container['no_issue'] = $no_issue;

        return $this;
    }

    /**
     * Gets references_incorrect
     *
     * @return string|null
     */
    public function getReferencesIncorrect()
    {
        return $this->container['references_incorrect'];
    }

    /**
     * Sets references_incorrect
     *
     * @param string|null $references_incorrect references_incorrect
     *
     * @return self
     */
    public function setReferencesIncorrect($references_incorrect)
    {
        if (is_null($references_incorrect)) {
            throw new \InvalidArgumentException('non-nullable references_incorrect cannot be null');
        }
        $this->container['references_incorrect'] = $references_incorrect;

        return $this;
    }

    /**
     * Gets legal_information_incorrect
     *
     * @return string|null
     */
    public function getLegalInformationIncorrect()
    {
        return $this->container['legal_information_incorrect'];
    }

    /**
     * Sets legal_information_incorrect
     *
     * @param string|null $legal_information_incorrect legal_information_incorrect
     *
     * @return self
     */
    public function setLegalInformationIncorrect($legal_information_incorrect)
    {
        if (is_null($legal_information_incorrect)) {
            throw new \InvalidArgumentException('non-nullable legal_information_incorrect cannot be null');
        }
        $this->container['legal_information_incorrect'] = $legal_information_incorrect;

        return $this;
    }

    /**
     * Gets credit_fully
     *
     * @return string|null
     */
    public function getCreditFully()
    {
        return $this->container['credit_fully'];
    }

    /**
     * Sets credit_fully
     *
     * @param string|null $credit_fully credit_fully
     *
     * @return self
     */
    public function setCreditFully($credit_fully)
    {
        if (is_null($credit_fully)) {
            throw new \InvalidArgumentException('non-nullable credit_fully cannot be null');
        }
        $this->container['credit_fully'] = $credit_fully;

        return $this;
    }

    /**
     * Gets receiver_unknown
     *
     * @return string|null
     */
    public function getReceiverUnknown()
    {
        return $this->container['receiver_unknown'];
    }

    /**
     * Sets receiver_unknown
     *
     * @param string|null $receiver_unknown receiver_unknown
     *
     * @return self
     */
    public function setReceiverUnknown($receiver_unknown)
    {
        if (is_null($receiver_unknown)) {
            throw new \InvalidArgumentException('non-nullable receiver_unknown cannot be null');
        }
        $this->container['receiver_unknown'] = $receiver_unknown;

        return $this;
    }

    /**
     * Gets item_quality_insufficient
     *
     * @return string|null
     */
    public function getItemQualityInsufficient()
    {
        return $this->container['item_quality_insufficient'];
    }

    /**
     * Sets item_quality_insufficient
     *
     * @param string|null $item_quality_insufficient item_quality_insufficient
     *
     * @return self
     */
    public function setItemQualityInsufficient($item_quality_insufficient)
    {
        if (is_null($item_quality_insufficient)) {
            throw new \InvalidArgumentException('non-nullable item_quality_insufficient cannot be null');
        }
        $this->container['item_quality_insufficient'] = $item_quality_insufficient;

        return $this;
    }

    /**
     * Gets delivery_issues
     *
     * @return string|null
     */
    public function getDeliveryIssues()
    {
        return $this->container['delivery_issues'];
    }

    /**
     * Sets delivery_issues
     *
     * @param string|null $delivery_issues delivery_issues
     *
     * @return self
     */
    public function setDeliveryIssues($delivery_issues)
    {
        if (is_null($delivery_issues)) {
            throw new \InvalidArgumentException('non-nullable delivery_issues cannot be null');
        }
        $this->container['delivery_issues'] = $delivery_issues;

        return $this;
    }

    /**
     * Gets prices_incorrect
     *
     * @return string|null
     */
    public function getPricesIncorrect()
    {
        return $this->container['prices_incorrect'];
    }

    /**
     * Sets prices_incorrect
     *
     * @param string|null $prices_incorrect prices_incorrect
     *
     * @return self
     */
    public function setPricesIncorrect($prices_incorrect)
    {
        if (is_null($prices_incorrect)) {
            throw new \InvalidArgumentException('non-nullable prices_incorrect cannot be null');
        }
        $this->container['prices_incorrect'] = $prices_incorrect;

        return $this;
    }

    /**
     * Gets quantity_incorrect
     *
     * @return string|null
     */
    public function getQuantityIncorrect()
    {
        return $this->container['quantity_incorrect'];
    }

    /**
     * Sets quantity_incorrect
     *
     * @param string|null $quantity_incorrect quantity_incorrect
     *
     * @return self
     */
    public function setQuantityIncorrect($quantity_incorrect)
    {
        if (is_null($quantity_incorrect)) {
            throw new \InvalidArgumentException('non-nullable quantity_incorrect cannot be null');
        }
        $this->container['quantity_incorrect'] = $quantity_incorrect;

        return $this;
    }

    /**
     * Gets items_incorrect
     *
     * @return string|null
     */
    public function getItemsIncorrect()
    {
        return $this->container['items_incorrect'];
    }

    /**
     * Sets items_incorrect
     *
     * @param string|null $items_incorrect items_incorrect
     *
     * @return self
     */
    public function setItemsIncorrect($items_incorrect)
    {
        if (is_null($items_incorrect)) {
            throw new \InvalidArgumentException('non-nullable items_incorrect cannot be null');
        }
        $this->container['items_incorrect'] = $items_incorrect;

        return $this;
    }

    /**
     * Gets payment_terms_incorrect
     *
     * @return string|null
     */
    public function getPaymentTermsIncorrect()
    {
        return $this->container['payment_terms_incorrect'];
    }

    /**
     * Sets payment_terms_incorrect
     *
     * @param string|null $payment_terms_incorrect payment_terms_incorrect
     *
     * @return self
     */
    public function setPaymentTermsIncorrect($payment_terms_incorrect)
    {
        if (is_null($payment_terms_incorrect)) {
            throw new \InvalidArgumentException('non-nullable payment_terms_incorrect cannot be null');
        }
        $this->container['payment_terms_incorrect'] = $payment_terms_incorrect;

        return $this;
    }

    /**
     * Gets not_recognized
     *
     * @return string|null
     */
    public function getNotRecognized()
    {
        return $this->container['not_recognized'];
    }

    /**
     * Sets not_recognized
     *
     * @param string|null $not_recognized not_recognized
     *
     * @return self
     */
    public function setNotRecognized($not_recognized)
    {
        if (is_null($not_recognized)) {
            throw new \InvalidArgumentException('non-nullable not_recognized cannot be null');
        }
        $this->container['not_recognized'] = $not_recognized;

        return $this;
    }

    /**
     * Gets finance_incorrect
     *
     * @return string|null
     */
    public function getFinanceIncorrect()
    {
        return $this->container['finance_incorrect'];
    }

    /**
     * Sets finance_incorrect
     *
     * @param string|null $finance_incorrect finance_incorrect
     *
     * @return self
     */
    public function setFinanceIncorrect($finance_incorrect)
    {
        if (is_null($finance_incorrect)) {
            throw new \InvalidArgumentException('non-nullable finance_incorrect cannot be null');
        }
        $this->container['finance_incorrect'] = $finance_incorrect;

        return $this;
    }

    /**
     * Gets partially_paid
     *
     * @return string|null
     */
    public function getPartiallyPaid()
    {
        return $this->container['partially_paid'];
    }

    /**
     * Sets partially_paid
     *
     * @param string|null $partially_paid partially_paid
     *
     * @return self
     */
    public function setPartiallyPaid($partially_paid)
    {
        if (is_null($partially_paid)) {
            throw new \InvalidArgumentException('non-nullable partially_paid cannot be null');
        }
        $this->container['partially_paid'] = $partially_paid;

        return $this;
    }

    /**
     * Gets other
     *
     * @return string|null
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param string|null $other other
     *
     * @return self
     */
    public function setOther($other)
    {
        if (is_null($other)) {
            throw new \InvalidArgumentException('non-nullable other cannot be null');
        }
        $this->container['other'] = $other;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


